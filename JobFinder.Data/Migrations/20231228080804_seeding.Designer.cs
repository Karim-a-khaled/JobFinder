// <auto-generated />
using System;
using JobFinder.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace JobFinder.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231228080804_seeding")]
    partial class seeding
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("JobFinder.Entities.Entities.Application", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CoverLetter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSubmitted")
                        .HasColumnType("bit");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("JobSeekerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("JobSeekerId");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("JobFinder.Entities.Entities.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St, Anytown, CA 12345",
                            CreatedBy = 0,
                            CreationDate = new DateTime(2023, 12, 28, 11, 8, 3, 806, DateTimeKind.Local).AddTicks(4970),
                            Email = "info@acme.com",
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0,
                            Name = "Acme Corporation",
                            PhoneNumber = "1-800-555-1212",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Elm St, Business City, NY 54321",
                            CreatedBy = 0,
                            CreationDate = new DateTime(2023, 12, 28, 11, 8, 3, 806, DateTimeKind.Local).AddTicks(4971),
                            Email = "contact@globex.com",
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0,
                            Name = "Globex Corporation",
                            PhoneNumber = "1-888-555-2323",
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            Address = "456 Elm St, Business City, NY 54321",
                            CreatedBy = 0,
                            CreationDate = new DateTime(2023, 12, 28, 11, 8, 3, 806, DateTimeKind.Local).AddTicks(4973),
                            Email = "contact@microsoft.com",
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0,
                            Name = "Microsoft",
                            PhoneNumber = "1-888-555-2323",
                            UserId = 3
                        },
                        new
                        {
                            Id = 4,
                            Address = "456 Elm St, Business City, NY 54321",
                            CreatedBy = 0,
                            CreationDate = new DateTime(2023, 12, 28, 11, 8, 3, 806, DateTimeKind.Local).AddTicks(4975),
                            Email = "contact@uber.com",
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0,
                            Name = "Uber",
                            PhoneNumber = "1-888-555-2323",
                            UserId = 4
                        },
                        new
                        {
                            Id = 5,
                            Address = "789 Tech St, Silicon Valley, CA 98765",
                            CreatedBy = 0,
                            CreationDate = new DateTime(2023, 12, 28, 11, 8, 3, 806, DateTimeKind.Local).AddTicks(4976),
                            Email = "support@initech.com",
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0,
                            Name = "Initech",
                            PhoneNumber = "1-877-555-3434",
                            UserId = 5
                        });
                });

            modelBuilder.Entity("JobFinder.Entities.Entities.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("CvFile")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobSeekerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobSeekerId")
                        .IsUnique();

                    b.ToTable("File");
                });

            modelBuilder.Entity("JobFinder.Entities.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Jobs");
                });

            modelBuilder.Entity("JobFinder.Entities.Entities.JobSeeker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFresh")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("YearsOfExperience")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("JobSeekers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            CreationDate = new DateTime(2023, 12, 28, 11, 8, 3, 806, DateTimeKind.Local).AddTicks(5001),
                            Email = "john.doe@example.com",
                            IsFresh = false,
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0,
                            Name = "John Doe",
                            UserId = 6,
                            YearsOfExperience = 5
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            CreationDate = new DateTime(2023, 12, 28, 11, 8, 3, 806, DateTimeKind.Local).AddTicks(5003),
                            Email = "jane.smith@example.com",
                            IsFresh = true,
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0,
                            Name = "Jane Smith",
                            UserId = 7,
                            YearsOfExperience = 0
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 0,
                            CreationDate = new DateTime(2023, 12, 28, 11, 8, 3, 806, DateTimeKind.Local).AddTicks(5004),
                            Email = "bob.johnson@example.com",
                            IsFresh = false,
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0,
                            Name = "Bob Johnson",
                            UserId = 8,
                            YearsOfExperience = 7
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 0,
                            CreationDate = new DateTime(2023, 12, 28, 11, 8, 3, 806, DateTimeKind.Local).AddTicks(5005),
                            Email = "alice.williams@example.com",
                            IsFresh = true,
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0,
                            Name = "Alice Williams",
                            UserId = 9,
                            YearsOfExperience = 0
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = 0,
                            CreationDate = new DateTime(2023, 12, 28, 11, 8, 3, 806, DateTimeKind.Local).AddTicks(5007),
                            Email = "random@example.com",
                            IsFresh = true,
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0,
                            Name = "Random",
                            UserId = 10,
                            YearsOfExperience = 0
                        });
                });

            modelBuilder.Entity("JobFinder.Entities.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModificationDate = new DateTime(2023, 12, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            ModifiedBy = 0,
                            Name = "JobSeeker"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModificationDate = new DateTime(2023, 12, 28, 0, 0, 0, 0, DateTimeKind.Local),
                            ModifiedBy = 0,
                            Name = "Employer"
                        });
                });

            modelBuilder.Entity("JobFinder.Entities.Entities.UserManagement.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsCompany")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedBy = 0,
                            CreationDate = new DateTime(2023, 12, 28, 11, 8, 3, 806, DateTimeKind.Local).AddTicks(4775),
                            Email = "info@acme.com",
                            IsCompany = true,
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0,
                            Password = "password"
                        },
                        new
                        {
                            Id = 2,
                            CreatedBy = 0,
                            CreationDate = new DateTime(2023, 12, 28, 11, 8, 3, 806, DateTimeKind.Local).AddTicks(4786),
                            Email = "contact@globex.com",
                            IsCompany = true,
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0,
                            Password = "password"
                        },
                        new
                        {
                            Id = 3,
                            CreatedBy = 0,
                            CreationDate = new DateTime(2023, 12, 28, 11, 8, 3, 806, DateTimeKind.Local).AddTicks(4788),
                            Email = "contact@microsoft.com",
                            IsCompany = true,
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0,
                            Password = "password"
                        },
                        new
                        {
                            Id = 4,
                            CreatedBy = 0,
                            CreationDate = new DateTime(2023, 12, 28, 11, 8, 3, 806, DateTimeKind.Local).AddTicks(4789),
                            Email = "contact@uber.com",
                            IsCompany = true,
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0,
                            Password = "password"
                        },
                        new
                        {
                            Id = 5,
                            CreatedBy = 0,
                            CreationDate = new DateTime(2023, 12, 28, 11, 8, 3, 806, DateTimeKind.Local).AddTicks(4790),
                            Email = "support@initech.com",
                            IsCompany = true,
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0,
                            Password = "password"
                        },
                        new
                        {
                            Id = 6,
                            CreatedBy = 0,
                            CreationDate = new DateTime(2023, 12, 28, 11, 8, 3, 806, DateTimeKind.Local).AddTicks(4791),
                            Email = "john.doe@example.com",
                            IsCompany = false,
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0,
                            Password = "password"
                        },
                        new
                        {
                            Id = 7,
                            CreatedBy = 0,
                            CreationDate = new DateTime(2023, 12, 28, 11, 8, 3, 806, DateTimeKind.Local).AddTicks(4793),
                            Email = "jane.smith@example.com",
                            IsCompany = false,
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0,
                            Password = "password"
                        },
                        new
                        {
                            Id = 8,
                            CreatedBy = 0,
                            CreationDate = new DateTime(2023, 12, 28, 11, 8, 3, 806, DateTimeKind.Local).AddTicks(4794),
                            Email = "bob.johnson@example.com",
                            IsCompany = false,
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0,
                            Password = "password"
                        },
                        new
                        {
                            Id = 9,
                            CreatedBy = 0,
                            CreationDate = new DateTime(2023, 12, 28, 11, 8, 3, 806, DateTimeKind.Local).AddTicks(4795),
                            Email = "alice.williams@example.com",
                            IsCompany = false,
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0,
                            Password = "password"
                        },
                        new
                        {
                            Id = 10,
                            CreatedBy = 0,
                            CreationDate = new DateTime(2023, 12, 28, 11, 8, 3, 806, DateTimeKind.Local).AddTicks(4796),
                            Email = "random@example.com",
                            IsCompany = false,
                            ModificationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ModifiedBy = 0,
                            Password = "password"
                        });
                });

            modelBuilder.Entity("JobFinder.Entities.Entities.UserManagement.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("JobFinder.Entities.Entities.Application", b =>
                {
                    b.HasOne("JobFinder.Entities.Entities.Job", "Job")
                        .WithMany("Applications")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobFinder.Entities.Entities.JobSeeker", "JobSeeker")
                        .WithMany("Applications")
                        .HasForeignKey("JobSeekerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Job");

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("JobFinder.Entities.Entities.Company", b =>
                {
                    b.HasOne("JobFinder.Entities.Entities.UserManagement.User", "User")
                        .WithOne("Company")
                        .HasForeignKey("JobFinder.Entities.Entities.Company", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobFinder.Entities.Entities.File", b =>
                {
                    b.HasOne("JobFinder.Entities.Entities.JobSeeker", "JobSeeker")
                        .WithOne("File")
                        .HasForeignKey("JobFinder.Entities.Entities.File", "JobSeekerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("JobSeeker");
                });

            modelBuilder.Entity("JobFinder.Entities.Entities.Job", b =>
                {
                    b.HasOne("JobFinder.Entities.Entities.Company", "Company")
                        .WithMany("Jobs")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("JobFinder.Entities.Entities.JobSeeker", b =>
                {
                    b.HasOne("JobFinder.Entities.Entities.UserManagement.User", "User")
                        .WithOne("JobSeeker")
                        .HasForeignKey("JobFinder.Entities.Entities.JobSeeker", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobFinder.Entities.Entities.UserManagement.UserRole", b =>
                {
                    b.HasOne("JobFinder.Entities.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("JobFinder.Entities.Entities.UserManagement.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("JobFinder.Entities.Entities.Company", b =>
                {
                    b.Navigation("Jobs");
                });

            modelBuilder.Entity("JobFinder.Entities.Entities.Job", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("JobFinder.Entities.Entities.JobSeeker", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("File")
                        .IsRequired();
                });

            modelBuilder.Entity("JobFinder.Entities.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("JobFinder.Entities.Entities.UserManagement.User", b =>
                {
                    b.Navigation("Company")
                        .IsRequired();

                    b.Navigation("JobSeeker")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
